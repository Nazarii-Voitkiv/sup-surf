const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const API_URL = process.env.API_URL || 'http://localhost:3000/api/bookings';
const adminChatId = process.env.ADMIN_CHAT_ID;
const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

if (!token) {
  console.error('TELEGRAM_BOT_TOKEN is required');
  process.exit(1);
}

if (!API_URL) {
  console.error('API_URL is required');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

async function sendMessage(chatId, message, options = {}) {
  try {
    await bot.sendMessage(chatId, message, options);
    return true;
  } catch (error) {
    console.error(`Failed to send message to ${chatId}:`, error);
    return false;
  }
}

function getErrorMessage(error) {
  if (error.response?.data?.message === '–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ') 
    return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (3 –º–∏–Ω—É—Ç—ã). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ.";
  
  if (error.response?.data?.message === '–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
    return "–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ.";
  
  return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
}

function formatDate(date) {
  return new Date(date).toLocaleDateString('ru-RU', {
    day: 'numeric', month: 'long', year: 'numeric'
  });
}

function formatDateTime(date, time) {
  return time ? `${formatDate(date)}, ${time}` : formatDate(date);
}

function getActivityName(type) {
  return type === 'sup' ? 'SUP-–ø—Ä–æ–≥—É–ª–∫–∞' : '–°–µ—Ä—Ñ–∏–Ω–≥';
}

function sortBookingsByDate(bookings) {
  return [...bookings].sort((a, b) => {
    const dateA = new Date(`${a.date}T${a.time || '00:00'}`);
    const dateB = new Date(`${b.date}T${b.time || '00:00'}`);
    return dateA - dateB;
  });
}

function createBookingsListMessage(bookings) {
  if (!bookings || bookings.length === 0) return null;
  
  const sortedBookings = sortBookingsByDate(bookings);
  const bookingsList = sortedBookings.map((booking, i) => {
    const dateText = formatDateTime(booking.date, booking.time);
    const typeText = getActivityName(booking.type);
    return `${i + 1}. ${dateText} - ${typeText}`;
  }).join('\n');
  
  return `üóì –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n${bookingsList}`;
}

function createAdminBookingsListMessage(bookings) {
  if (!bookings || bookings.length === 0) return null;
  
  const sortedBookings = sortBookingsByDate(bookings);
  const bookingsList = sortedBookings.map((booking, i) => {
    const dateText = formatDateTime(booking.date, booking.time);
    const typeText = getActivityName(booking.type);
    const status = booking.confirmed ? "‚úÖ" : "‚è≥";
    const contactInfo = booking.telegram ? `@${booking.telegram}` : booking.phone;
    
    return `${i + 1}. ${status} ${dateText} - ${typeText}\n   üë§ ${booking.name} | üìû ${contactInfo}`;
  }).join('\n\n');
  
  return `üìã –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\n\n${bookingsList}`;
}

async function handleBookingDetails(chatId, bookingId, messageId) {
  try {
    const response = await axios.get(`${BASE_URL}/api/user/bookings/details?bookingId=${bookingId}&chatId=${chatId}`);
    
    if (response.data.success) {
      const booking = response.data.booking;
      const dateText = formatDateTime(booking.date, booking.time);
      const typeText = getActivityName(booking.type);
      
      const detailsMessage = `üìã *–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n` +
                         `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${dateText}\n` +
                         `üèÑ‚Äç‚ôÇÔ∏è –¢–∏–ø: ${typeText}\n` +
                         `üë§ –ò–º—è: ${booking.name}\n` + 
                         `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.phone}\n`;
      
      const inlineKeyboard = [
        [{text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data: `cancel_${booking.id}`}],
        [{text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data: `back_to_list`}]
      ];
      
      await bot.editMessageText(detailsMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: inlineKeyboard }
      });
    } else {
      await bot.answerCallbackQuery(query.id, {
        text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
        show_alert: true
      });
    }
  } catch (error) {
    console.error('Error getting booking details:', error);
    await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.");
  }
}

async function handleBookingCancellation(chatId, bookingId, messageId, queryId = null) {
  try {
    const confirmMessage = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?";
    const confirmKeyboard = [
      [{text: "‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data: `confirm_cancel_${bookingId}`}],
      [{text: "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data: `back_to_list`}]
    ];
    
    await bot.editMessageText(confirmMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: confirmKeyboard }
    });
    
    if (queryId) await bot.answerCallbackQuery(queryId);
  } catch (error) {
    console.error('Error preparing cancellation:', error);
    if (queryId) {
      await bot.answerCallbackQuery(queryId, {
        text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–º–µ–Ω—ã",
        show_alert: true
      });
    }
  }
}

async function showUserBookings(chatId) {
  try {
    const response = await axios.get(`${BASE_URL}/api/user/bookings?chatId=${chatId}`);
    
    if (response.data.success) {
      if (!response.data.bookings || response.data.bookings.length === 0) {
        await sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.");
        return;
      }
      
      const bookings = response.data.bookings;
      const inlineKeyboard = bookings.map((booking, index) => ([
        {text: `üìÖ –ü–æ–¥—Ä–æ–±–Ω–µ–µ #${index + 1}`, callback_data: `details_${booking.id}`},
        {text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #${index + 1}`, callback_data: `cancel_${booking.id}`}
      ]));
      
      const message = createBookingsListMessage(bookings);
      await sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: inlineKeyboard }
      });
    } else {
      await sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } catch (error) {
    console.error('Error getting user bookings:', error);
    await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function fetchAndDisplayAdminBookings(chatId, period, titleText) {
  try {
    const endpoint = period 
      ? `${BASE_URL}/api/admin/bookings/filtered?period=${period}&token=${process.env.ADMIN_TOKEN}`
      : `${BASE_URL}/api/admin/bookings?token=${process.env.ADMIN_TOKEN}`;
      
    const response = await axios.get(endpoint);
    
    if (response.data.success) {
      if (!response.data.bookings || response.data.bookings.length === 0) {
        await sendMessage(chatId, `–ù–∞ ${titleText.toLowerCase()} –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.`);
        return;
      }
      
      const message = createAdminBookingsListMessage(response.data.bookings);
      const fullMessage = `${titleText}\n\n${message}`;
      
      const maxLength = 4000;
      if (fullMessage.length > maxLength) {
        const parts = [];
        for (let i = 0; i < fullMessage.length; i += maxLength) {
          parts.push(fullMessage.substring(i, i + maxLength));
        }
        
        for (let i = 0; i < parts.length; i++) {
          const header = i === 0 ? "" : `(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ${i+1}/${parts.length})\n\n`;
          await sendMessage(chatId, `${header}${parts[i]}`, { parse_mode: 'Markdown' });
        }
      } else {
        await sendMessage(chatId, fullMessage, { parse_mode: 'Markdown' });
      }
    } else {
      await sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } catch (error) {
    console.error(`Error getting ${period || 'all'} bookings:`, error);
    await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.");
  }
}

const isAdmin = (chatId) => adminChatId && chatId.toString() === adminChatId.toString();

const getUserCommands = () => `üîπ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:

/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/bookings –∏–ª–∏ /my - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ`;

const getAdminCommands = () => `üî∏ *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*:

/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/today - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/tomorrow - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/nextweek - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
/nextmonth - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
/allbookings - –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
/bookings –∏–ª–∏ /my - –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ`;

bot.onText(/\/start (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const confirmationId = match[1];
  const username = msg.from.username || '';
  
  await sendMessage(chatId, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...");
  
  try {
    const response = await axios.put(API_URL, {
      confirmationId,
      chatId,
      username
    });
    
    if (!response.data.success) {
      await sendMessage(chatId, getErrorMessage(response));
    }

    if (adminChatId) {
      const userTag = username ? `@${username}` : `ID: ${chatId}`;
      const adminMessage = `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞!\n\nüë§ –ò–º—è: ${booking.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.phone}\nüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formattedDate}\nüèÑ‚Äç‚ôÇÔ∏è –¢–∏–ø: ${getActivityName(booking.type)}\nüì± Telegram: ${userTag}`;
      await sendTelegramNotification(token, adminChatId, adminMessage);
    }
  } catch (error) {
    await sendMessage(chatId, getErrorMessage(error));
  }
});

bot.onText(/\/bookings/, async (msg) => await showUserBookings(msg.chat.id));
bot.onText(/\/my/, async (msg) => await showUserBookings(msg.chat.id));

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const messageId = query.message.message_id;
  
  if (data.startsWith('details_')) {
    const bookingId = data.replace('details_', '');
    await handleBookingDetails(chatId, bookingId, messageId);
  } else if (data.startsWith('cancel_')) {
    const bookingId = data.replace('cancel_', '');
    await handleBookingCancellation(chatId, bookingId, messageId, query.id);
  } else if (data === 'back_to_list') {
    await bot.deleteMessage(chatId, messageId);
    await showUserBookings(chatId);
    await bot.answerCallbackQuery(query.id);
  } else if (data.startsWith('confirm_cancel_')) {
    const bookingId = data.replace('confirm_cancel_', '');
    
    try {
      const response = await axios.delete(`${BASE_URL}/api/user/bookings`, {
        data: { bookingId, chatId }
      });
      
      if (response.data.success) {
        await bot.answerCallbackQuery(query.id, {
          text: '‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        });
        
        await bot.deleteMessage(chatId, messageId);
        await sendMessage(chatId, "‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        
        if (response.data.remainingBookings?.length > 0) {
          await showUserBookings(chatId);
        }
        
        if (adminChatId) {
          const bookingInfo = response.data.canceledBooking;
          const dateText = formatDateTime(bookingInfo.date, bookingInfo.time);
          const typeText = getActivityName(bookingInfo.type);
          const telegramInfo = query.from.username ? `@${query.from.username}` : `ID: ${chatId}`;
          
          const adminMessage = `‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n\nüë§ –ò–º—è: ${bookingInfo.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${bookingInfo.phone}\nüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${dateText}\nüèÑ‚Äç‚ôÇÔ∏è –¢–∏–ø: ${typeText}\nüì± Telegram: ${telegramInfo}`;
          await sendMessage(adminChatId, adminMessage);
        }
      } else {
        await bot.answerCallbackQuery(query.id, {
          text: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
          show_alert: true
        });
      }
    } catch (error) {
      console.error('Error canceling booking:', error);
      await bot.answerCallbackQuery(query.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ',
        show_alert: true
      });
    }
  }
});

const adminCommandHandlers = {
  '/today': { period: 'today', title: 'üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*' },
  '/tomorrow': { period: 'tomorrow', title: 'üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞*' },
  '/nextweek': { period: 'week', title: 'üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥*' },
  '/nextmonth': { period: 'month', title: 'üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥*' },
  '/allbookings': { period: null, title: 'üìÖ *–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*' }
};

Object.entries(adminCommandHandlers).forEach(([command, { period, title }]) => {
  bot.onText(new RegExp(command), async (msg) => {
    const chatId = msg.chat.id;
    
    if (!isAdmin(chatId)) {
      await sendMessage(chatId, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
      return;
    }
    
    await fetchAndDisplayAdminBookings(chatId, period, title);
  });
});

bot.onText(/^\/start$/, (msg) => {
  const chatId = msg.chat.id;
  const isAdminUser = isAdmin(chatId);
  
  const welcomeMessage = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–∞–ø-–ø—Ä–æ–≥—É–ª–∫–∏ –∏ —Å–µ—Ä—Ñ–∏–Ω–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.';
  
  const userKeyboard = {
    reply_markup: {
      keyboard: [
        [{ text: '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' }, { text: '–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' }],
        [{ text: '–ü–æ–º–æ—â—å' }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
  
  const adminKeyboard = {
    reply_markup: {
      keyboard: [
        [{ text: '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' }, { text: '–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' }],
        [{ text: '–°–µ–≥–æ–¥–Ω—è' }, { text: '–ó–∞–≤—Ç—Ä–∞' }],
        [{ text: '–ù–∞ –Ω–µ–¥–µ–ª—é' }, { text: '–ù–∞ –º–µ—Å—è—Ü' }],
        [{ text: '–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' }, { text: '–ü–æ–º–æ—â—å' }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
  
  bot.sendMessage(chatId, welcomeMessage, isAdminUser ? adminKeyboard : userKeyboard);
  
  setTimeout(() => {
    const commandsText = isAdminUser ? getAdminCommands() : getUserCommands();
    bot.sendMessage(chatId, commandsText, { parse_mode: 'Markdown' });
  }, 500);
});

const textCommandMap = {
  '–º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è': '/bookings',
  '–ø–æ–º–æ—â—å': '/help',
  '–æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': '/cancel',
  '—Å–µ–≥–æ–¥–Ω—è': '/today',
  '–∑–∞–≤—Ç—Ä–∞': '/tomorrow',
  '–Ω–∞ –Ω–µ–¥–µ–ª—é': '/nextweek',
  '–Ω–∞ –º–µ—Å—è—Ü': '/nextmonth',
  '–≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è': '/allbookings'
};

bot.on('message', (msg) => {
  if (!msg.text) return;
  
  const chatId = msg.chat.id;
  const text = msg.text.toLowerCase();
  const command = textCommandMap[text];
  
  if (command) {
    if (command.startsWith('/today') || command.startsWith('/tomorrow') || 
        command.startsWith('/nextweek') || command.startsWith('/nextmonth') || 
        command.startsWith('/allbookings')) {
      if (!isAdmin(chatId)) return;
    }
    
    bot.emit('text', msg, [command]);
  }
});

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  const isAdminUser = isAdmin(chatId);
  const commandsText = isAdminUser ? getAdminCommands() : getUserCommands();
  await sendMessage(chatId, commandsText, { parse_mode: 'Markdown' });
});

bot.onText(/\/cancel/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const response = await axios.get(`${BASE_URL}/api/user/bookings?chatId=${chatId}`);
    
    if (response.data.success && response.data.bookings && response.data.bookings.length > 0) {
      const bookings = response.data.bookings;
      const inlineKeyboard = bookings.map((booking, index) => ([{
        text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: ${formatDateTime(booking.date, booking.time)} - ${getActivityName(booking.type)}`,
        callback_data: `cancel_${booking.id}`
      }]));
      
      await sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", {
        reply_markup: { inline_keyboard: inlineKeyboard }
      });
    } else {
      await sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.");
    }
  } catch (error) {
    console.error('Error getting bookings for cancel:', error);
    await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.");
  }
});

const standardCommands = [
  { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
  { command: 'bookings', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' },
  { command: 'my', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' },
  { command: 'cancel', description: '–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' }
];

const adminCommands = [
  ...standardCommands,
  { command: 'today', description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' },
  { command: 'tomorrow', description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞' },
  { command: 'nextweek', description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é' },
  { command: 'nextmonth', description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü' },
  { command: 'allbookings', description: '–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' }
];

bot.setMyCommands(standardCommands);

if (adminChatId) {
  try {
    bot.setMyCommands(adminCommands, { scope: { chat_id: adminChatId } });
  } catch (error) {
    console.error('Error setting admin commands:', error);
  }
}

console.log('Telegram bot started successfully');
